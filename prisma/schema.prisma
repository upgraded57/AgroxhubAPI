// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String @id @default(uuid())
  name                    String
  email                   String @unique
  avatar                  String? @default("")
  coverImg                String? @default("")
  password                String
  isActive                Boolean @default(false)
  points                  Int @default(0)
  type                    userType
  phoneNumber             String?
  newsletterSubscription  Boolean @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  address                 String? @default("")
  otp                     Otp[]
  notifications           Notification[]
  reviews                 Review[]
  saves                   SavedItem[]
  products                Product[]
  region                  Region? @relation(fields: [regionId], references: [id])
  regionId                String?
  purchases               Product[] @relation("UserPurchases")
  cart                    Cart?
  orders                  Order[]
  orderGroups             OrderGroup[]


  following               Following[] @relation("UserFollowing")
  followers               Following[] @relation("UserFollowers")
}

model Following {
  id                      String @id @default(uuid())
  followerId              String
  followingId             String
  createdAt               DateTime @default(now())
  follower                User @relation(fields: [followerId], references: [id], name: "UserFollowers")
  following               User @relation(fields: [followingId], references: [id], name: "UserFollowing")

  @@unique([followerId, followingId]) // Prevent duplicate follows
}

enum userType {
  farmer 
  xforce 
  affiliate
  wholesaler
  buyer
}


model Product {
  id                      String @id @unique @default(uuid())
  category                Category @relation(fields: [categoryId], references: [id])
  categoryId              String
  name                    String @unique
  slug                    String @unique @default("")
  description             String
  quantity                Int
  isActive                Boolean @default(true)
  isPromoted              Boolean? @default(false)
  promotionLevel          promotionLevel?
  images                  String[]
  seller                  User @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId                String
  ratings                 Float? @default(4)
  location                String 
  region                  Region? @relation(fields: [regionId], references: [id])
  regionId                String?
  unit                    String @default("")
  unitWeight              String 
  unitPrice               Int @default(0)
  expiryDate              DateTime? 
  discountPercentage      Int?
  reviews                 Review[]
  saves                   SavedItem[]
  tags                    Tag[]
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  buyers                  User[] @relation("UserPurchases")
  purchases               Int @default(0) 
  cartItem                CartItem[]
  views                   Int @default(0)
  clicks                  Int @default(0)
  orders                  OrderItem[]
}

enum promotionLevel {
  basic
  advance 
  plus 
}

model Cart {
  id                      String @id @default(uuid())
  user                    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String @unique
  cartItems               CartItem[]
  createdAt               DateTime @default(now())
}

model CartItem {
  id                      String @id @default(uuid())
  cart                    Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId                  String 
  product                 Product @relation(fields: [slug], references: [slug], onDelete: Cascade)
  slug                    String @unique
  quantity                Int
  createdAt               DateTime @default(now())
}

model Notification {
  id                      String   @id @default(uuid())
  type                    NotificationType
  isGeneral               Boolean  @default(false)
  unread                  Boolean  @default(true)
  subject                 String
  content                 String
  attachment              String?
  user                    User?    @relation(fields: [userId], references: [id])
  userId                  String? 
  createdAt               DateTime @default(now())
}

enum NotificationType {
  follow
  productReview 
  productSave 
  productOrder 
  productDelivery 
  productShipped
  productClicks
}

model Region {
  id                 String @id @unique @default(uuid())
  state              String
  lcda               String
  name               String
  lat                Float
  long               Float
  users              User[]
  products           Product[]
  orders             Order[]
  logisticRegion     LogisticsProvider[]
  logisticsProviders LogisticsProviderRegion[]
}

model Review {
  id                    String @id @unique @default(uuid())
  sellerId              String 
  product               Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId             String? 
  logistic              LogisticsProvider? @relation(fields: [logisticsProviderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  logisticsProviderId   String?
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                String 
  rating                Float
  subject               String 
  description           String 
  createdAt             DateTime @default(now())
}

model SavedItem {
  id                    String @id @unique @default(uuid())
  product               Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId             String
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                String 
  createdAt             DateTime @default(now())
}

model Category {
  id                    String @unique @default(uuid())
  name                  String @unique
  slug                  String @default("")
  products              Product[]
  logisticCategory      LogisticsProviderCategory[]
}

model Tag {
  id                    String @id @unique @default(uuid())
  product               Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId             String
}

model Otp{
  id                    String @id @unique @default(uuid())
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                String 
  otp                   Int
  createdAt             DateTime @default(now()) 
  used                  Boolean @default(false)
}

model Order {
  id                      String @id @default(uuid())
  orderNumber             String @default("")
  user                    User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                  String
  items                   OrderItem[]
  productsAmount          Float @default(0)//This will be change to productsAmount later. Logistic amount, vat, etc to be added to calculate totalAmount.
  logisticsAmount         Float @default(0)
  totalAmount             Float @default(0)
  vat                     Float @default(0)
  paymentStatus           PaymentStatus @default(pending)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  orderGroups             OrderGroup[] // A single order can have multiple orderGroups (for different sellers)
  deliveryAddress         String
  deliveryRegion          Region @relation(fields: [deliveryRegionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deliveryRegionId        String
  status                  OrderStatus @default(pending) 
  referenceCode           String? @unique
  accessCode              String? @unique
}

model OrderGroup {
  id                      String @id @default(uuid())
  orderItems              OrderItem[] 
  seller                  User @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId                String
  status                  OrderStatus @default(pending) 
  logisticsProvider       LogisticsProvider? @relation(fields: [logisticsProviderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  logisticsProviderId     String?
  Order                   Order[]
  sellerNote              String?
  logisticsNote           String?
  pickupDate              DateTime?
  deliveryDate            DateTime?
  logisticsCost           Int? // Calculated in kobo
  orderCompletionCode     Int @default(000000)
  pickupImages            String[]
  pickupTime              DateTime?
}

model OrderItem {
  id                    String @id @default(uuid())
  order                 Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId               String
  orderGroup            OrderGroup @relation(fields: [orderGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Links each item to an OrderGroup
  orderGroupId          String
  product               Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId             String
  quantity              Int
  unitPrice             Float
  totalPrice            Float
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

enum OrderStatus {
  pending
  in_transit
  delivered
  rejected
  canceled
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

model LogisticsProvider {
  id                          String @id @default(uuid())
  name                        String
  email                       String @unique
  password                    String
  isActive                    Boolean @default(false)
  contact                     String?
  avatar                      String?
  address                     String?
  availableRegions            LogisticsProviderRegion[]
  orderGroups                 OrderGroup[]
  logisticCategories          LogisticsProviderCategory[]
  review                      Review[]
  region                      Region? @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  regionId                    String?
  isVisible                   Boolean @default(true)
}

// Join table for many-to-many relationship
model LogisticsProviderRegion {
  logisticsProvider          LogisticsProvider @relation(fields: [logisticsProviderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  logisticsProviderId        String
  region                     Region @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  regionId                   String

  @@id([logisticsProviderId, regionId]) // Composite primary key to avoid duplicates
}

// Join table for many-to-many relationship
model LogisticsProviderCategory {
  logisticsProvider          LogisticsProvider @relation(fields: [logisticsProviderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  logisticsProviderId        String
  category                   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId                 String
  unitCost                   Int // Calculated in kobo

  @@id([logisticsProviderId, categoryId]) // Composite primary key to avoid duplicates
}